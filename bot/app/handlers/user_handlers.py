from app.handlers.router import user_router as router
import asyncio
import logging
import random
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext

from app.keyboards import inline_user as inline_keyboards

from app.states.states import Post

from aiogram.types import BufferedInputFile

from app.keyboards.inline_user import get_catalogue, get_posts

from app.requests.user.login import login
from app.requests.user.set_blocked import set_blocked
from app.requests.helpers.get_cat_error import get_cat_error_async
from app.requests.get.get_categories import get_categories
from app.requests.get.get_post import get_post
from app.requests.helpers.get_cat_error import get_cat_error_async
from aiogram.filters import ChatMemberUpdatedFilter, KICKED
from aiogram.types import ChatMemberUpdated

from app.filters.IsAdmin import IsAdmin


#===========================================================================================================================
# –í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#===========================================================================================================================
"""
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    await set_blocked(telegram_id=event.from_user.id, value=False)
"""
#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================

@router.message(CommandStart(), ~IsAdmin())
async def cmd_start(message: Message, state: FSMContext):
    data = await login(telegram_id=message.from_user.id)
    await set_blocked(telegram_id=message.from_user.id, value=True)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! üëã")
    await message.reply("–Ø –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Florilegium. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await state.clear()


@router.callback_query(F.data == "restart")
async def callback_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç! üëã")
    await callback.message.reply("–Ø –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Florilegium. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π \n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏–º–µ—é—â–∏—Ö—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n@Elena_Noro\n\n@dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)

@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\@Elena\\_Noro\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback: CallbackQuery):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\@Elena\\_Noro\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# –ö–∞—Ç–∞–ª–æ–≥
#===========================================================================================================================
@router.callback_query(F.data == "catalogue")
async def catalogue_callback(callback: CallbackQuery):
    categories = await get_categories(telegram_id= callback.from_user.id)
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üëá", reply_markup= await get_catalogue(categories))
    await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def category_catalogue_callback(callback: CallbackQuery):
    await callback.answer()
    category_id = callback.data.split("_")[1]
    categories = await get_categories(telegram_id= callback.from_user.id)
    print(category_id)
    current_category = None
    if categories is not None:
        for category in categories:
            if str(category.get("id")) == str(category_id):
                current_category = category
                break
    
    if current_category is None or current_category.get("posts") is None or current_category.get("posts") == []:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ! ‚è≥", reply_markup= inline_keyboards.catalogue)
        await callback.answer()
        return
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüëá", reply_markup= await get_posts(category= current_category ,posts = current_category.get("posts", [])))


@router.callback_query(F.data.startswith("post_"))
async def post_catalogue_callback(callback: CallbackQuery):
    await callback.answer()
    post_id = callback.data.split("_")[2]
    category_id = callback.data.split("_")[1]
    post_data = await get_post(
        telegram_id=callback.from_user.id,
        post_id= post_id,
        category_id= category_id
    )
    if post_data is None or not post_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é üòî", reply_markup=inline_keyboards.home)
        return
    await send_post_photos(callback = callback, post = post_data)
    message_text = (
        f"üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:**\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{post_data['title']}`\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** `{post_data['description']}`\n"
        f"**–¶–µ–Ω–∞:** `{post_data['price']}`\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** `{post_data['quantity']}`\n"
    )
    await callback.message.answer(
        text=message_text,
        parse_mode="MarkdownV2",
        reply_markup=inline_keyboards.home
    )
#===========================================================================================================================
# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
#===========================================================================================================================
@router.callback_query(F.data == "account_menu")
async def account_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º? üë§", reply_markup=inline_keyboards.account_menu)
    await callback.answer()

@router.callback_query(F.data == "delete_account_confirmation")
async def delete_account_confirmation_callback(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? üò≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ... üóëÔ∏è", reply_markup=inline_keyboards.delete_account_confirmation_menu)
    await callback.answer()

@router.callback_query(F.data == "delete_account")
async def delete_account_callback(callback: CallbackQuery, state: FSMContext):
    await delete_account(telegram_id=callback.from_user.id)
    await state.clear()
    await callback.message.edit_text("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω üò¢", reply_markup=inline_keyboards.restart)
    await callback.answer()


#===========================================================================================================================
# –ó–∞–≥–ª—É—à–∫–∞
#===========================================================================================================================

@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê")
    photo_data = await get_cat_error_async()
    if photo_data:
        photo_to_send = BufferedInputFile(photo_data, filename="cat_error.jpg")
        await message.bot.send_photo(chat_id=message.chat.id, photo=photo_to_send)


async def send_post_photos(callback: CallbackQuery, post: Dict[str, Any]):
    photo_ids = post.get('photos', [])

    if not photo_ids:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. üñºÔ∏è")
        return

    first_photo_id = photo_ids[0]
    caption_text = f"**{post.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**"
    
    await callback.message.answer_photo(
        photo=first_photo_id,
        caption=caption_text,
        parse_mode="MarkdownV2"
    )

    for photo_id in photo_ids[1:]:
        await callback.message.answer_photo(photo=photo_id)